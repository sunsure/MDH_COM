- title t '.title', article_title: @article.title
.page-header
  %h3=t '.title', article_title: @article.title

- content_for(:sidebar) do
  - if can? :edit, @article
    = link_to edit_admin_article_path(@article), class: 'btn btn-warning btn-small btn-block' do
      %i.icon-edit.icon-white
      %span.addon= t('.edit', default: t("helpers.links.edit"))
  - if can? :update, @article
    - if @article.published_at.present?
      = link_to admin_article_path(@article, article: { published_at: nil }), method: :put, class: "btn btn-inverse btn-block" do
        %i.icon-remove-circle.icon-white
        %span.addon= t(".unpublish")
    - else
      = link_to admin_article_path(@article, article: { publish: "1" }), method: :put, class: "btn btn-inverse btn-block" do
        %i.icon-ok-sign.icon-white
        %span.addon= t('.publish')
  - if can? :destroy, @article
    = link_to admin_article_path(@article), method: "delete", data: { confirm: t('.confirm', default: t("helpers.links.confirm")) }, class: 'btn btn-danger btn-small btn-block' do
      %i.icon-remove.icon-white
      %span.addon= t('.destroy', default: t("helpers.links.destroy"))

%div.media
  = link_to @article, class: "pull-left" do
    = image_tag "pfp_logo_icon.jpg", class: "media-object"
  %div.media-body
    %h4.media-heading
      = link_to @article.title, admin_articles_path
    %div
      %code.author= @article.try(:user).try(:name)
      - if @article.published_at?
        %section.inline.published_at= l(@article.published_at, format: :short)
      - if @article.updated_at?
        %section.inline.updated_at= l(@article.updated_at, format: :short) if @article.updated_at?
    - unless @article.tag_list.blank?
      %ul.breadcrumb.tag-list
        - @article.tag_list.each do |tag|
          %li
            = link_to tag, tag_admin_articles_path(tag)
            - unless tag == @article.tag_list.last
              %span.divider /
  .row-fluid
    .lead= to_markdown(@article.excerpt)
  .row-fluid
    .clearfix= to_markdown(@article.content)

  %fieldset
    %legend
      %i.icon-comment
      %span.inline#article_comments_legend= pluralize(@article.comments.size, 'comment').titleize
    %div
      - if current_user
        - if can? :create, Comment
          %p= t(".leave_comments")
          = link_to t(".add_comment"), new_article_comment_path(@article), id: 'new_comment_link', remote: true
      - else
        %p= t(".login_or_register")
    #comments
      - @root_comments.each do |comment|
        = render "comments/comment", comment: comment
